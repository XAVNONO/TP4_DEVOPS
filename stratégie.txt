>> Objectif : Chaîne de déploiement continue pour les applications en Python

>> Outil utilisé : Jenkins Orchestration

>> Détail du Pipeline:

###################################################################################################
pipeline {
  agent any

  parameters {
      choice(name: 'ENVIRONMENT', choices: ['dev', 'test', 'prod'], description: 'Choose environment')
  }
 
  environment {
      IMAGE_TAG = "${env.PYTHONAPP}"
      DOCKER_HUB_USER = "${env.MONID}"
      DOCKER_HUB_PAT = "${env.TOKHUBDOCKER}"
      DOCKER_HUB_MAIL = "${env.MONMAIL}"
      DOCKER_REGISTRY = "${env.MONREGISTRE}"
  }

  stages {

//>>>>> DEV "Dans une VM sur le cloud => simple docker run" <<<<<//
      stage('RUN_DEV') {
        when {
            expression {params.ENVIRONMENT == 'dev'}
        }
          steps {
              // Récupération de l'image applicative provenant de Hub Docker 
              sh 'docker pull xavnono/python-app:latest'
              // Lancement du containeur applicatif
              sh 'docker container run -d -p 8888:8000 --name python-app_dev xavnono/python-app:latest'
              // Check état containeur "exited"
              sh 'while [ "$(docker inspect -f "{{.State.Status}}" python-app-dev)" != "exited" ]; do sleep 1; done'
              // Nettoyage containeur
              sh 'docker rm python-app-dev'
            }
          }

//>>>>> TEST "Dans une VM => Docker compose pour test" <<<<<//        
      stage('Test_Scout') {
        when {
            expression {params.ENVIRONMENT == 'test'}
        }
          steps {
              // Lancement containeur Docker Scout
              sh 'docker-compose up'
              // Check état containeur "exited"
              sh 'while [ "$(docker inspect -f "{{.State.Status}}" tp4-poei_scout-cli_1)" != "exited" ]; do sleep 1; done'
              // Nettoyage containeur
              sh 'docker-compose down'
            }
          }

//>>>>> PROD "Déploiement kubernetes" <<<<<//        
      stage('Deploy_PROD') {
        when {
            expression {params.ENVIRONMENT == 'prod'}
        }
          steps {
              // Lancement de minikube
              sh 'minikube start'
              // création de secret sur kubernetes
              sh '''
                  kubectl create secret docker-registry regcred \
                    --docker-server=${DOCKER_REGISTRY} \
                    --docker-username=${DOCKER_HUB_USER} \
                    --docker-password=${DOCKER_HUB_PAT} \
                    --docker-email=${DOCKER_HUB_MAIL}
                 '''
              // Déploiement en réplica 3
              sh 'kubectl apply -f deployment.yaml'
              // Vérification du succés du déploiement
              sh 'kubectl rollout status deployment/python-app-deployment'
          }
        }
      }
    }

###################################################################################################
docker-compose.yml
'''
version: '3'

services:
  scout-cli:
    image: docker/scout-cli
    environment:
      - DOCKER_SCOUT_HUB_USER=xavnono
      - DOCKER_SCOUT_HUB_PASSWORD=dckr_pat_4J2oyGlyWzsg8HafBxz4YnTOqhQ
    command: cves xavnono/python-app --exit-code --only-severity critical,high

  # python_app:
  #   image: xavnono/python-app
'''
###################################################################################################
deployment.yaml
'''
apiVersion: apps/v1            # Version API Kubernetes
kind: Deployment
metadata:
  name: python-app-deployment    # Nom du déploiement
spec:                        # spécification du déploiement
  replicas: 3                    # Nombres de répliques du déploiement
  selector:
    matchLabels:
      app: python-app            # Etiquettes et valeur qui doivent être associés aux PODs de ce déploiement
  template:
    metadata:
      labels:
        app: python-app          # Etiquettes et valeur associés aux PODs générés
    spec:                    # spécification du POD
      imagePullSecrets:
      - name: regcred        # Mes credentials pour le HubDocker
      containers:
      - name: python-app                    # Nom du conteneur
        image: xavnono/python-app:latest    # Image Docker utilisée
        ports:
        - containerPort: 8900              # Port d'écoute du conteneur
'''
###################################################################################################




